{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda Auto-Generated Documentation Index","text":"<p>Welcome to the Nautee Documentation Portal. This site contains documentation generated automatically by Claude from Anthropic.</p>"},{"location":"#autodocs-generated","title":"\ud83d\uddc2\ufe0f AutoDocs (Generated)","text":"<p>Last updated: 2025-11-01 18:23</p>"},{"location":"#other-markdown-files","title":"\ud83d\uddc3\ufe0f Other Markdown Files","text":"<ul> <li>generate_docs_py.md</li> <li>tools_claude_folder_review_py.md</li> <li>tools_claude_folder_review_batched_py.md</li> <li>tools_autodoc_py.md</li> <li>tools_old_autodoc_py.md</li> <li>tools_claude_review_py.md</li> <li>tools_changelog_py.md</li> <li>internal/auto-dev-loop-concept.md</li> <li>internal/nautee-concept.md</li> </ul>"},{"location":"generate_docs_py/","title":"Generate docs py","text":""},{"location":"generate_docs_py/#python-documentation-generator","title":"Python Documentation Generator","text":""},{"location":"generate_docs_py/#overview","title":"Overview","text":"<p>This Python script is an automated documentation generator that scans Python files in a source directory and creates Markdown documentation for each file. It's designed to work with MkDocs to generate a documentation website.</p>"},{"location":"generate_docs_py/#purpose","title":"Purpose","text":"<p>The script automatically: - Scans Python files in the <code>tools/</code> directory - Generates Markdown documentation files containing the source code - Creates an index page listing all documented files - Updates the MkDocs configuration file with navigation entries</p>"},{"location":"generate_docs_py/#configuration","title":"Configuration","text":"<p>The script uses the following constants for configuration:</p> <pre><code>SOURCE_DIR = \"tools\"        # Directory to scan for Python files\nOUTPUT_DIR = \"docs\"         # Where to output generated documentation\nINDEX_FILE = \"docs/index.md\"  # Main index file path\nMKDOCS_FILE = \"mkdocs.yml\"  # MkDocs configuration file\n</code></pre>"},{"location":"generate_docs_py/#key-functions","title":"Key Functions","text":""},{"location":"generate_docs_py/#normalize_filenamepy_path-str-str","title":"<code>normalize_filename(py_path: str) -&gt; str</code>","text":"<ul> <li>Purpose: Converts Python file paths to Markdown filename format</li> <li>Example: <code>tools/changelog.py</code> \u2192 <code>tools_changelog.md</code></li> <li>Implementation: Replaces path separators and file extensions</li> </ul>"},{"location":"generate_docs_py/#extract_titlepy_path-str-str","title":"<code>extract_title(py_path: str) -&gt; str</code>","text":"<ul> <li>Purpose: Creates human-readable titles from file paths</li> <li>Example: <code>tools/my_script.py</code> \u2192 <code>My Script</code></li> <li>Implementation: Extracts basename, removes extension, replaces underscores with spaces, and applies title case</li> </ul>"},{"location":"generate_docs_py/#generate_markdownpy_path-str-output_path-str","title":"<code>generate_markdown(py_path: str, output_path: str)</code>","text":"<ul> <li>Purpose: Creates Markdown documentation files containing the source code</li> <li>Features:</li> <li>Adds file path as header</li> <li>Includes last modification timestamp</li> <li>Wraps entire Python file content in code blocks</li> <li>Uses UTF-8 encoding for proper character handling</li> </ul>"},{"location":"generate_docs_py/#cleanup_old_docs","title":"<code>cleanup_old_docs()</code>","text":"<ul> <li>Purpose: Removes previously generated documentation files</li> <li>Target patterns: </li> <li>Files starting with <code>autodoc_tools_</code></li> <li>Files starting with <code>tools_</code></li> <li>Note: Ensures clean regeneration on each run</li> </ul>"},{"location":"generate_docs_py/#main","title":"<code>main()</code>","text":"<ul> <li>Purpose: Orchestrates the entire documentation generation process</li> <li>Workflow:</li> <li>Clean up old documentation files</li> <li>Walk through source directory</li> <li>Generate Markdown for each Python file</li> <li>Create index page with links to all documents</li> <li>Update MkDocs navigation configuration</li> </ul>"},{"location":"generate_docs_py/#generated-output","title":"Generated Output","text":""},{"location":"generate_docs_py/#index-file-docsindexmd","title":"Index File (<code>docs/index.md</code>)","text":"<ul> <li>Creates a welcoming documentation portal</li> <li>Lists all documented tools with clickable links</li> <li>Branded as \"Nautee documentation portal\"</li> </ul>"},{"location":"generate_docs_py/#individual-documentation-files","title":"Individual Documentation Files","text":"<p>Each generated file contains: - File path as main header - Last modification timestamp - Complete source code in syntax-highlighted code blocks</p>"},{"location":"generate_docs_py/#mkdocs-configuration-update","title":"MkDocs Configuration Update","text":"<ul> <li>Automatically updates <code>mkdocs.yml</code> navigation section</li> <li>Creates hierarchical navigation structure:   <pre><code>nav:\n  - Home: index.md\n  - AutoDocs:\n      - Tool Name: tool_file.md\n</code></pre></li> </ul>"},{"location":"generate_docs_py/#usage","title":"Usage","text":"<p>Run the script directly: <pre><code>python documentation_generator.py\n</code></pre></p>"},{"location":"generate_docs_py/#requirements","title":"Requirements","text":"<ul> <li>Python 3.6+ (uses f-strings)</li> <li>Write permissions to docs directory</li> <li>Existing <code>mkdocs.yml</code> file</li> </ul>"},{"location":"generate_docs_py/#notes-and-suggestions","title":"Notes and Suggestions","text":""},{"location":"generate_docs_py/#important-considerations","title":"\u26a0\ufe0f Important Considerations","text":"<ul> <li>File Overwriting: The script overwrites existing documentation files without backup</li> <li>MkDocs Dependency: Assumes MkDocs configuration structure</li> <li>Directory Structure: Requires <code>docs/</code> and <code>tools/</code> directories to exist</li> </ul>"},{"location":"generate_docs_py/#potential-improvements","title":"\ud83d\udd27 Potential Improvements","text":"<ol> <li>Error Handling: Add try-catch blocks for file operations</li> <li>Backup Strategy: Create backups before overwriting files</li> <li>Configuration File: Make directories and patterns configurable</li> <li>Logging: Add logging for better debugging and monitoring</li> <li>Content Extraction: Consider parsing docstrings for better documentation</li> <li>Filtering: Add options to exclude certain files or patterns</li> </ol>"},{"location":"generate_docs_py/#usage-tips","title":"\ud83d\udca1 Usage Tips","text":"<ul> <li>Run this script as part of your CI/CD pipeline for automatic documentation updates</li> <li>Consider scheduling regular runs to keep documentation synchronized with code changes</li> <li>Pair with MkDocs themes for professional-looking documentation websites</li> </ul>"},{"location":"tools_autodoc_py/","title":"\ud83d\udcc4 Autodoc","text":""},{"location":"tools_autodoc_py/#autodoc-generator-documentation","title":"Autodoc Generator Documentation","text":""},{"location":"tools_autodoc_py/#overview","title":"Overview","text":"<p>The <code>autodoc.py</code> script is an automated documentation generator that scans Python projects, analyzes source code files, and generates comprehensive Markdown documentation using Claude AI. It creates a complete documentation site structure compatible with MkDocs.</p>"},{"location":"tools_autodoc_py/#purpose","title":"Purpose","text":"<p>This tool automates the documentation process by: - Scanning Python source files in a project - Generating technical documentation using Claude AI - Creating a structured documentation site with MkDocs configuration - Maintaining an index of all generated documentation</p>"},{"location":"tools_autodoc_py/#key-features","title":"Key Features","text":"<ul> <li>Automated Python file discovery - Recursively scans directories for Python files</li> <li>AI-powered documentation generation - Uses Claude to create comprehensive docs</li> <li>MkDocs integration - Automatically configures MkDocs with Material theme</li> <li>Index management - Creates and maintains documentation indexes</li> </ul>"},{"location":"tools_autodoc_py/#dependencies","title":"Dependencies","text":"<pre><code>import os\nimport sys\nimport anthropic\nfrom dotenv import load_dotenv\nfrom datetime import datetime\nimport yaml\n</code></pre>"},{"location":"tools_autodoc_py/#required-environment-variables","title":"Required Environment Variables","text":"<ul> <li><code>ANTHROPIC_API_KEY</code> - API key for Claude AI service</li> <li><code>ANTHROPIC_MODEL</code> - Claude model to use (defaults to \"claude-sonnet-4-20250514\")</li> </ul>"},{"location":"tools_autodoc_py/#core-functions","title":"Core Functions","text":""},{"location":"tools_autodoc_py/#file-processing-functions","title":"File Processing Functions","text":""},{"location":"tools_autodoc_py/#snake_md_pathrel_path-str-str","title":"<code>snake_md_path(rel_path: str) -&gt; str</code>","text":"<p>Converts file paths to snake_case Markdown filenames. - Replaces path separators and dots with underscores - Appends <code>.md</code> extension</p>"},{"location":"tools_autodoc_py/#collect_python_filesbase-str","title":"<code>collect_python_files(base: str)</code>","text":"<p>Recursively discovers Python files in the target directory. - Excludes test files (<code>test_*.py</code>) - Excludes <code>__init__.py</code> files - Returns list of file paths</p>"},{"location":"tools_autodoc_py/#configuration-management","title":"Configuration Management","text":""},{"location":"tools_autodoc_py/#load_mkdocs_configpath-str","title":"<code>load_mkdocs_config(path: str)</code>","text":"<p>Loads existing MkDocs configuration or creates default structure. - Returns YAML configuration dictionary - Provides sensible defaults if no config exists</p>"},{"location":"tools_autodoc_py/#write_mkdocs_configpath-str-static_nav-autodoc_items","title":"<code>write_mkdocs_config(path: str, static_nav, autodoc_items)</code>","text":"<p>Generates comprehensive MkDocs configuration with: - Material theme with dark/light mode toggle - Enhanced features: navigation, search, code highlighting - Markdown extensions: admonitions, code blocks, emojis - Plugin support: search and mkdocstrings</p>"},{"location":"tools_autodoc_py/#documentation-generation","title":"Documentation Generation","text":""},{"location":"tools_autodoc_py/#write_index_mdnav_items","title":"<code>write_index_md(nav_items)</code>","text":"<p>Creates the main documentation index page with: - Welcome message and project description - Links to all generated documentation - Timestamp for last update</p>"},{"location":"tools_autodoc_py/#append_missing_docs_to_indexnav_items","title":"<code>append_missing_docs_to_index(nav_items)</code>","text":"<p>Appends any orphaned Markdown files to the index that aren't in the main navigation.</p>"},{"location":"tools_autodoc_py/#workflow","title":"Workflow","text":""},{"location":"tools_autodoc_py/#1-setup-phase","title":"1. Setup Phase","text":"<pre><code>load_dotenv()\nclient = anthropic.Anthropic(api_key=os.getenv(\"ANTHROPIC_API_KEY\"))\ntarget_path = sys.argv[1] if len(sys.argv) &gt; 1 else \".\"\n</code></pre>"},{"location":"tools_autodoc_py/#2-file-discovery","title":"2. File Discovery","text":"<ul> <li>Scans target directory for Python files</li> <li>Filters out test files and <code>__init__.py</code></li> <li>Creates list of files to document</li> </ul>"},{"location":"tools_autodoc_py/#3-documentation-generation","title":"3. Documentation Generation","text":"<p>For each Python file: - Reads source code - Sends to Claude AI with documentation prompt - Generates Markdown documentation - Saves to <code>docs/</code> directory</p>"},{"location":"tools_autodoc_py/#4-site-structure-creation","title":"4. Site Structure Creation","text":"<ul> <li>Updates MkDocs configuration</li> <li>Creates navigation structure</li> <li>Generates index page</li> <li>Links all documentation files</li> </ul>"},{"location":"tools_autodoc_py/#usage","title":"Usage","text":""},{"location":"tools_autodoc_py/#command-line","title":"Command Line","text":"<pre><code># Document current directory\npython autodoc.py\n\n# Document specific directory\npython autodoc.py /path/to/project\n</code></pre>"},{"location":"tools_autodoc_py/#output-structure","title":"Output Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                 # Main documentation index\n\u251c\u2500\u2500 module_name.md           # Generated documentation files\n\u2514\u2500\u2500 ...\nmkdocs.yml                   # MkDocs configuration\n</code></pre>"},{"location":"tools_autodoc_py/#configuration-notes","title":"Configuration Notes","text":""},{"location":"tools_autodoc_py/#mkdocs-theme-features","title":"MkDocs Theme Features","text":"<ul> <li>Material Design with responsive layout</li> <li>Code highlighting with line numbers</li> <li>Search functionality with suggestions</li> <li>Navigation enhancements with tabs and instant loading</li> <li>Dark/light mode toggle</li> </ul>"},{"location":"tools_autodoc_py/#markdown-extensions","title":"Markdown Extensions","text":"<ul> <li>Syntax highlighting with Pygments</li> <li>Admonitions for callouts</li> <li>Task lists and emoji support</li> <li>Table of contents with permalinks</li> </ul>"},{"location":"tools_autodoc_py/#suggestions-for-improvement","title":"Suggestions for Improvement","text":""},{"location":"tools_autodoc_py/#error-handling","title":"Error Handling","text":"<ul> <li>Add retry logic for API failures</li> <li>Implement file validation before processing</li> <li>Add graceful handling of permission errors</li> </ul>"},{"location":"tools_autodoc_py/#performance","title":"Performance","text":"<ul> <li>Consider parallel processing for multiple files</li> <li>Add caching to avoid re-documenting unchanged files</li> <li>Implement incremental updates</li> </ul>"},{"location":"tools_autodoc_py/#customization","title":"Customization","text":"<ul> <li>Make documentation templates configurable</li> <li>Add support for custom prompts per file type</li> <li>Allow theme and styling customization</li> </ul>"},{"location":"tools_autodoc_py/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Add validation for generated Markdown</li> <li>Implement consistency checks across documentation</li> <li>Add support for documentation reviews</li> </ul>"},{"location":"tools_autodoc_py/#notes","title":"Notes","text":"<p>\u26a0\ufe0f API Usage: This script makes API calls to Claude for each Python file. Monitor usage to avoid unexpected costs.</p> <p>\ud83d\udcc1 File Management: The script overwrites existing documentation files. Consider version control for documentation changes.</p> <p>\ud83d\udd27 Dependencies: Ensure all required packages are installed and environment variables are properly configured before running.</p> <p>Auto-generated documentation - Last updated: 2024</p>"},{"location":"tools_changelog_py/","title":"\ud83d\udcdd Changelog (Generated)","text":""},{"location":"tools_changelog_py/#changelog-generator-documentation","title":"Changelog Generator Documentation","text":""},{"location":"tools_changelog_py/#overview","title":"Overview","text":"<p>The Changelog Generator is a Python utility that automatically creates formatted changelogs from Git commit history. It leverages Claude AI (Anthropic's language model) to intelligently summarize recent commit messages into readable release notes and outputs them to a markdown file.</p>"},{"location":"tools_changelog_py/#purpose","title":"Purpose","text":"<p>This tool automates the tedious process of manually writing changelogs by: - Fetching recent Git commit messages - Using AI to categorize and summarize changes - Generating properly formatted markdown documentation - Maintaining a consistent changelog format</p>"},{"location":"tools_changelog_py/#dependencies","title":"Dependencies","text":"<pre><code>import os\nimport anthropic\nfrom dotenv import load_dotenv\nfrom datetime import datetime\nimport subprocess\n</code></pre>"},{"location":"tools_changelog_py/#required-packages","title":"Required Packages","text":"<ul> <li><code>anthropic</code> - Claude AI client library</li> <li><code>python-dotenv</code> - Environment variable management</li> <li><code>subprocess</code> - Git command execution</li> <li><code>os</code>, <code>datetime</code> - Standard library modules</li> </ul>"},{"location":"tools_changelog_py/#key-functions","title":"Key Functions","text":""},{"location":"tools_changelog_py/#get_git_logn20","title":"<code>get_git_log(n=20)</code>","text":"<p>Retrieves recent Git commit messages using the <code>git log</code> command.</p> <p>Parameters: - <code>n</code> (int, optional): Number of recent commits to fetch (default: 20)</p> <p>Returns: - <code>str</code>: Formatted commit messages as bullet points</p> <p>Features: - Uses <code>git log --pretty=format:* %s</code> for clean bullet-point formatting - Includes error handling for Git command failures - Returns fallback message if no commits are found</p> <pre><code># Example output format:\n* Add user authentication feature\n* Fix database connection timeout\n* Update documentation\n</code></pre>"},{"location":"tools_changelog_py/#format_promptgit_log-str","title":"<code>format_prompt(git_log: str)</code>","text":"<p>Creates a structured prompt for the Claude AI model to process commit messages.</p> <p>Parameters: - <code>git_log</code> (str): Raw commit messages from Git</p> <p>Returns: - <code>str</code>: Formatted prompt with instructions for AI summarization</p> <p>Features: - Provides clear instructions for changelog formatting - Requests categorization into sections (Features, Fixes, Improvements) - Ensures markdown output format</p>"},{"location":"tools_changelog_py/#main","title":"<code>main()</code>","text":"<p>The primary execution function that orchestrates the entire changelog generation process.</p> <p>Process Flow: 1. Loads environment variables 2. Initializes Anthropic client 3. Fetches Git commit history 4. Generates AI prompt 5. Calls Claude API for summarization 6. Writes formatted changelog to file</p>"},{"location":"tools_changelog_py/#configuration","title":"Configuration","text":""},{"location":"tools_changelog_py/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>ANTHROPIC_API_KEY=your_api_key_here\nANTHROPIC_MODEL=claude-sonnet-4-20250514\n</code></pre> <p>Required: - <code>ANTHROPIC_API_KEY</code>: Your Anthropic API key for Claude access</p> <p>Optional: - <code>ANTHROPIC_MODEL</code>: Claude model version (defaults to <code>claude-sonnet-4-20250514</code>)</p>"},{"location":"tools_changelog_py/#output","title":"Output","text":"<p>The generated changelog is saved to <code>docs/changelog.md</code> with the following structure:</p> <pre><code># \ud83d\udcdd Changelog\n\n_Last updated: 2024-01-15 14:30_\n\n## Features\n- Added user authentication system\n- Implemented dark mode toggle\n\n## Fixes\n- Resolved database connection issues\n- Fixed responsive design on mobile devices\n\n## Improvements\n- Enhanced error handling\n- Updated documentation\n</code></pre>"},{"location":"tools_changelog_py/#usage","title":"Usage","text":""},{"location":"tools_changelog_py/#basic-usage","title":"Basic Usage","text":"<pre><code>python changelog_generator.py\n</code></pre>"},{"location":"tools_changelog_py/#prerequisites","title":"Prerequisites","text":"<ol> <li>Git Repository: Must be run within a Git repository</li> <li>API Key: Valid Anthropic API key in environment variables</li> <li>Directory Structure: Ensure <code>docs/</code> directory exists</li> </ol>"},{"location":"tools_changelog_py/#error-handling","title":"Error Handling","text":"<p>The script includes error handling for: - Git command failures (missing repository, no commits) - API communication issues - File writing permissions</p>"},{"location":"tools_changelog_py/#suggestions-and-notes","title":"Suggestions and Notes","text":""},{"location":"tools_changelog_py/#important-considerations","title":"\u26a0\ufe0f Important Considerations","text":"<ul> <li>API Costs: Each run consumes Anthropic API tokens; monitor usage</li> <li>Rate Limits: Be aware of API rate limiting for frequent executions</li> <li>Git History: Ensure meaningful commit messages for better AI summarization</li> </ul>"},{"location":"tools_changelog_py/#potential-improvements","title":"\ud83d\udd27 Potential Improvements","text":"<ol> <li> <p>Add date range filtering for commits:    <pre><code># Example: Only commits from last week\ngit log --since=\"1 week ago\"\n</code></pre></p> </li> <li> <p>Implement changelog versioning:    <pre><code># Append to existing changelog instead of overwriting\n</code></pre></p> </li> <li> <p>Add commit filtering by type:    <pre><code># Filter out merge commits or specific patterns\ngit log --no-merges\n</code></pre></p> </li> <li> <p>Configuration file support:    <pre><code># Load settings from config.yaml\n</code></pre></p> </li> </ol>"},{"location":"tools_changelog_py/#best-practices","title":"\ud83d\udcdd Best Practices","text":"<ul> <li>Use conventional commit messages (e.g., <code>feat:</code>, <code>fix:</code>, <code>docs:</code>)</li> <li>Run before major releases</li> <li>Review generated changelog before publishing</li> <li>Keep API keys secure and never commit them to version control</li> </ul>"},{"location":"tools_changelog_py/#integration-ideas","title":"Integration Ideas","text":"<ul> <li>CI/CD Pipeline: Integrate into GitHub Actions or similar</li> <li>Release Automation: Trigger on git tags or release branches</li> <li>Slack/Discord: Send changelog summaries to team channels</li> <li>Multiple Formats: Export to different formats (JSON, HTML, etc.)</li> </ul>"},{"location":"tools_claude_folder_review_batched_py/","title":"\ud83d\udce6 Claude Folder Review Batched","text":""},{"location":"tools_claude_folder_review_batched_py/#claude-folder-review-batched-documentation","title":"Claude Folder Review (Batched) Documentation","text":""},{"location":"tools_claude_folder_review_batched_py/#overview","title":"Overview","text":"<p>This Python script provides an automated code review system that recursively analyzes source code files in a folder using Anthropic's Claude AI model. The script intelligently batches files based on token limits and generates comprehensive markdown reviews for each batch.</p>"},{"location":"tools_claude_folder_review_batched_py/#purpose","title":"Purpose","text":"<ul> <li>Automated Code Review: Leverage Claude AI to perform systematic code reviews</li> <li>Batch Processing: Handle large codebases by splitting files into manageable chunks</li> <li>Documentation Generation: Create organized markdown reports for review insights</li> <li>Multi-language Support: Review various programming languages and file formats</li> </ul>"},{"location":"tools_claude_folder_review_batched_py/#key-features","title":"Key Features","text":"<ul> <li>Token-aware batching (\u226410k tokens per batch)</li> <li>Automatic test file exclusion</li> <li>Multi-format file support</li> <li>Markdown report generation with timestamps</li> <li>Error handling and progress tracking</li> </ul>"},{"location":"tools_claude_folder_review_batched_py/#functions","title":"Functions","text":""},{"location":"tools_claude_folder_review_batched_py/#is_excludedfilename-str-bool","title":"<code>is_excluded(filename: str) -&gt; bool</code>","text":"<p>Determines whether a file should be excluded from review based on naming patterns.</p> <p>Parameters: - <code>filename</code> (str): The file path to evaluate</p> <p>Returns: - <code>bool</code>: True if the file should be excluded (test files), False otherwise</p> <p>Logic: - Excludes files containing \"test\" in the name - Excludes files starting with \"test_\" - Excludes files in test directories</p> <pre><code># Examples of excluded files:\n# - test_example.py\n# - /tests/unit_test.py\n# - example_test.js\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#estimate_tokenstext-str-int","title":"<code>estimate_tokens(text: str) -&gt; int</code>","text":"<p>Provides a rough estimate of token count for Claude API usage planning.</p> <p>Parameters: - <code>text</code> (str): Source code content</p> <p>Returns: - <code>int</code>: Estimated token count (characters \u00f7 4)</p> <p>Note: This is a simplified estimation. Actual token counts may vary based on Claude's tokenizer.</p>"},{"location":"tools_claude_folder_review_batched_py/#main","title":"<code>main()</code>","text":"<p>The primary execution function that orchestrates the entire review process.</p> <p>Process Flow: 1. Setup: Load environment variables and initialize Claude client 2. File Discovery: Recursively find valid source files 3. Token Batching: Group files into batches under token limit 4. Review Generation: Send batches to Claude for analysis 5. Output: Save markdown reviews to disk</p>"},{"location":"tools_claude_folder_review_batched_py/#configuration","title":"Configuration","text":""},{"location":"tools_claude_folder_review_batched_py/#environment-variables","title":"Environment Variables","text":"<pre><code># Required\nANTHROPIC_API_KEY=your_api_key_here\n\n# Optional (defaults to claude-sonnet-4-20250514)\nANTHROPIC_MODEL=claude-3-sonnet-20240229\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#supported-file-extensions","title":"Supported File Extensions","text":"<p>The script processes files with the following extensions: - Python: <code>.py</code> - JavaScript/TypeScript: <code>.js</code>, <code>.ts</code>, <code>.tsx</code>, <code>.jsx</code> - Web: <code>.html</code>, <code>.css</code> - Data: <code>.json</code>, <code>.yaml</code>, <code>.yml</code> - Other: <code>.go</code>, <code>.java</code></p>"},{"location":"tools_claude_folder_review_batched_py/#usage","title":"Usage","text":""},{"location":"tools_claude_folder_review_batched_py/#basic-usage","title":"Basic Usage","text":"<p><pre><code>python claude_folder_review.py\n</code></pre> Reviews the default folder: <code>../137docs</code></p>"},{"location":"tools_claude_folder_review_batched_py/#custom-folder","title":"Custom Folder","text":"<pre><code>python claude_folder_review.py /path/to/your/codebase\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#output-structure","title":"Output Structure","text":"<pre><code>docs/folder_review/\n\u251c\u2500\u2500 folder_review_batch_01.md\n\u251c\u2500\u2500 folder_review_batch_02.md\n\u2514\u2500\u2500 folder_review_batch_03.md\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#review-focus-areas","title":"Review Focus Areas","text":"<p>Each batch review covers: - Code Organization: Structure and maintainability - Bug Patterns: Potential issues and vulnerabilities - Architecture Weaknesses: Design flaws and improvements - Modularization: Suggestions for better code organization - Clarity: Readability and documentation recommendations</p>"},{"location":"tools_claude_folder_review_batched_py/#dependencies","title":"Dependencies","text":"<pre><code># Required packages\npip install anthropic python-dotenv\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#limitations-considerations","title":"Limitations &amp; Considerations","text":""},{"location":"tools_claude_folder_review_batched_py/#token-limits","title":"Token Limits","text":"<ul> <li>Batch Size: Maximum 10,000 tokens per batch</li> <li>Response Limit: 2,000 tokens per review</li> <li>Large files may be truncated or split across batches</li> </ul>"},{"location":"tools_claude_folder_review_batched_py/#file-exclusions","title":"File Exclusions","text":"<ul> <li>Automatically excludes test files</li> <li>May miss important test-related code architecture</li> <li>Consider reviewing test files separately if needed</li> </ul>"},{"location":"tools_claude_folder_review_batched_py/#api-costs","title":"API Costs","text":"<ul> <li>Each batch consumes Claude API tokens</li> <li>Monitor usage for large codebases</li> <li>Consider using cheaper models for initial reviews</li> </ul>"},{"location":"tools_claude_folder_review_batched_py/#suggestions-for-improvement","title":"Suggestions for Improvement","text":""},{"location":"tools_claude_folder_review_batched_py/#enhanced-filtering","title":"Enhanced Filtering","text":"<pre><code># Add more sophisticated exclusion rules\ndef is_excluded(filename: str) -&gt; bool:\n    excluded_patterns = [\n        \"test\", \"__pycache__\", \".git\", \"node_modules\",\n        \"dist\", \"build\", \".env\"\n    ]\n    return any(pattern in filename.lower() for pattern in excluded_patterns)\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#better-token-estimation","title":"Better Token Estimation","text":"<pre><code># Use tiktoken for more accurate token counting\nimport tiktoken\n\ndef estimate_tokens(text: str) -&gt; int:\n    encoding = tiktoken.get_encoding(\"cl100k_base\")\n    return len(encoding.encode(text))\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#progress-tracking","title":"Progress Tracking","text":"<pre><code># Add progress bars for better UX\nfrom tqdm import tqdm\n\nfor i, batch in enumerate(tqdm(batches, desc=\"Processing batches\")):\n    # ... processing logic\n</code></pre>"},{"location":"tools_claude_folder_review_batched_py/#error-handling","title":"Error Handling","text":"<p>The script includes basic error handling for: - File reading errors - Claude API failures - Missing environment variables</p> <p>Consider adding more robust error recovery and retry logic for production use.</p>"},{"location":"tools_claude_folder_review_py/","title":"\ud83e\udde0 Claude Folder Review","text":""},{"location":"tools_claude_folder_review_py/#claude-folder-reviewer","title":"Claude Folder Reviewer","text":""},{"location":"tools_claude_folder_review_py/#overview","title":"Overview","text":"<p>The Claude Folder Reviewer is a Python script that automates code review processes by scanning folders for source files and leveraging Anthropic's Claude AI to provide structural code insights. The tool batches multiple files together and generates comprehensive Markdown-formatted reviews focusing on code quality, architecture, and improvement suggestions.</p>"},{"location":"tools_claude_folder_review_py/#purpose","title":"Purpose","text":"<p>This tool is designed to: - Automate code reviews for entire project folders - Identify structural issues and architecture weaknesses - Provide actionable insights for code improvement - Generate comprehensive reports in Markdown format - Save time on manual code review processes</p>"},{"location":"tools_claude_folder_review_py/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd0d Recursive file scanning with support for multiple programming languages</li> <li>\ud83d\udcca Real-time progress tracking with ETA calculations</li> <li>\ud83e\udd16 AI-powered code analysis using Claude</li> <li>\ud83d\udcdd Markdown report generation with timestamps</li> <li>\u26a1 Batch processing for efficient API usage</li> </ul>"},{"location":"tools_claude_folder_review_py/#dependencies","title":"Dependencies","text":"<pre><code>import os\nimport sys\nimport anthropic\nfrom dotenv import load_dotenv\nfrom datetime import datetime\nimport time\n</code></pre>"},{"location":"tools_claude_folder_review_py/#required-packages","title":"Required Packages","text":"<ul> <li><code>anthropic</code> - Official Anthropic API client</li> <li><code>python-dotenv</code> - Environment variable management</li> </ul>"},{"location":"tools_claude_folder_review_py/#important-functions","title":"Important Functions","text":""},{"location":"tools_claude_folder_review_py/#render_progresscurrent-total-width30","title":"<code>render_progress(current, total, width=30)</code>","text":"<p>Creates a visual progress bar for terminal output.</p> <p>Parameters: - <code>current</code> (int): Current progress count - <code>total</code> (int): Total items to process - <code>width</code> (int): Progress bar width in characters (default: 30)</p> <p>Returns: - <code>str</code>: Formatted progress bar with percentage</p> <pre><code># Example output: [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588----------] 67%\n</code></pre>"},{"location":"tools_claude_folder_review_py/#estimate_valid_filesfolder-valid_exts","title":"<code>estimate_valid_files(folder, valid_exts)</code>","text":"<p>Recursively discovers source files in a directory tree.</p> <p>Parameters: - <code>folder</code> (str): Root directory path to scan - <code>valid_exts</code> (tuple): Supported file extensions</p> <p>Returns: - <code>list</code>: Complete file paths of all valid source files</p> <p>Supported Extensions: - <code>.py</code> (Python) - <code>.js</code> (JavaScript) - <code>.ts</code> (TypeScript) - <code>.tsx</code> (TypeScript React) - <code>.jsx</code> (JavaScript React)</p>"},{"location":"tools_claude_folder_review_py/#main","title":"<code>main()</code>","text":"<p>The primary execution function that orchestrates the entire review process:</p> <ol> <li>Environment Setup - Loads API keys and configuration</li> <li>File Discovery - Scans target folder for source files</li> <li>Content Aggregation - Combines all files into a single prompt</li> <li>AI Analysis - Sends batch request to Claude API</li> <li>Report Generation - Saves results to timestamped Markdown file</li> </ol>"},{"location":"tools_claude_folder_review_py/#configuration","title":"Configuration","text":""},{"location":"tools_claude_folder_review_py/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code>ANTHROPIC_API_KEY=your_api_key_here\nANTHROPIC_MODEL=claude-sonnet-4-20250514\n</code></pre>"},{"location":"tools_claude_folder_review_py/#command-line-usage","title":"Command Line Usage","text":"<pre><code># Review current directory\npython claude_folder_reviewer.py\n\n# Review specific folder\npython claude_folder_reviewer.py /path/to/project\n\n# Review relative path\npython claude_folder_reviewer.py ../my-project\n</code></pre>"},{"location":"tools_claude_folder_review_py/#output-format","title":"Output Format","text":""},{"location":"tools_claude_folder_review_py/#terminal-output","title":"Terminal Output","text":"<ul> <li>Real-time progress tracking</li> <li>ETA calculations</li> <li>File processing status</li> <li>Error handling for inaccessible files</li> </ul>"},{"location":"tools_claude_folder_review_py/#generated-reports","title":"Generated Reports","text":"<ul> <li>Location: <code>output/folder_review_YYYY-MM-DDTHH-MM-SS.md</code></li> <li>Format: Structured Markdown with sections for:</li> <li>Code organization analysis</li> <li>Bug pattern identification</li> <li>Architecture weakness assessment</li> <li>Modularization recommendations</li> </ul>"},{"location":"tools_claude_folder_review_py/#error-handling","title":"Error Handling","text":"<p>The script includes robust error handling for: - Missing API keys - Graceful failure with clear error messages - Invalid file paths - Continues processing other files - API rate limits - Proper exception handling for Claude API errors - File access issues - Skips problematic files with error logging</p>"},{"location":"tools_claude_folder_review_py/#limitations-considerations","title":"Limitations &amp; Considerations","text":""},{"location":"tools_claude_folder_review_py/#token-limits","title":"Token Limits","text":"<ul> <li>Claude has a 2000 token limit for responses</li> <li>Large codebases may need to be reviewed in chunks</li> <li>Consider splitting very large projects into smaller batches</li> </ul>"},{"location":"tools_claude_folder_review_py/#api-costs","title":"API Costs","text":"<ul> <li>Each review consumes Claude API credits</li> <li>Batch processing helps minimize API calls</li> <li>Monitor usage for cost-sensitive projects</li> </ul>"},{"location":"tools_claude_folder_review_py/#file-size-limits","title":"File Size Limits","text":"<ul> <li>Very large files may exceed prompt limits</li> <li>Consider excluding generated files or dependencies</li> </ul>"},{"location":"tools_claude_folder_review_py/#suggestions-for-improvement","title":"Suggestions for Improvement","text":""},{"location":"tools_claude_folder_review_py/#recommended-enhancements","title":"Recommended Enhancements","text":"<ol> <li> <p>Configuration File Support <pre><code># Add support for .reviewrc or config.yaml\n# Allow custom file extension lists\n# Enable/disable specific analysis types\n</code></pre></p> </li> <li> <p>Chunking Strategy <pre><code># Implement intelligent file batching\n# Respect token limits automatically\n# Generate multiple reports for large projects\n</code></pre></p> </li> <li> <p>Output Customization <pre><code># Add JSON output format option\n# Support custom report templates\n# Enable filtering by severity/category\n</code></pre></p> </li> <li> <p>Enhanced Progress Tracking <pre><code># Add file size estimation\n# Show processing speed metrics\n# Include memory usage monitoring\n</code></pre></p> </li> </ol>"},{"location":"tools_claude_folder_review_py/#usage-best-practices","title":"Usage Best Practices","text":"<ul> <li>Start small - Test with small projects first</li> <li>Review outputs - Validate AI suggestions before implementation</li> <li>Version control - Keep review reports in project history</li> <li>Iterative improvement - Run reviews regularly during development</li> </ul>"},{"location":"tools_claude_folder_review_py/#example-workflow","title":"Example Workflow","text":"<pre><code># 1. Set up environment\necho \"ANTHROPIC_API_KEY=your_key\" &gt; .env\n\n# 2. Run review\npython claude_folder_reviewer.py ./my-project\n\n# 3. Check results\nls output/\ncat output/folder_review_2024-01-15T14-30-45.md\n</code></pre> <p>This tool provides a powerful foundation for automated code review processes and can be easily extended to meet specific project requirements.</p>"},{"location":"tools_claude_review_py/","title":"\ud83d\udcac Claude Review (File or Git)","text":""},{"location":"tools_claude_review_py/#claude-review-tool-documentation","title":"Claude Review Tool Documentation","text":""},{"location":"tools_claude_review_py/#overview","title":"Overview","text":"<p>The Claude Review Tool is a Python script that leverages Anthropic's Claude AI to perform automated code reviews. It supports two modes of operation:</p> <ol> <li>Manual File Review: Reviews specific source files provided as command-line arguments</li> <li>Git Diff Review: Reviews changes between Git commits automatically</li> </ol> <p>The tool outputs structured feedback in Markdown format, making it easy to integrate into development workflows and documentation.</p>"},{"location":"tools_claude_review_py/#purpose","title":"Purpose","text":"<ul> <li>Automate code review processes using AI</li> <li>Provide consistent, structured feedback on code quality</li> <li>Support both targeted file reviews and Git-based change reviews</li> <li>Generate documentation-ready output in Markdown format</li> </ul>"},{"location":"tools_claude_review_py/#requirements","title":"Requirements","text":"<ul> <li>Python 3.x</li> <li><code>anthropic</code> Python package</li> <li><code>python-dotenv</code> package</li> <li>Git (for diff mode)</li> <li>Anthropic API key</li> </ul>"},{"location":"tools_claude_review_py/#environment-setup","title":"Environment Setup","text":"<p>Create a <code>.env</code> file in your project root with the following variables:</p> <pre><code>ANTHROPIC_API_KEY=your_api_key_here\nANTHROPIC_MODEL=claude-sonnet-4-20250514  # Optional, defaults to this model\n</code></pre>"},{"location":"tools_claude_review_py/#usage","title":"Usage","text":""},{"location":"tools_claude_review_py/#mode-1-manual-file-review","title":"Mode 1: Manual File Review","text":"<pre><code>python claude_review.py file1.py file2.py [additional_files...]\n</code></pre>"},{"location":"tools_claude_review_py/#mode-2-git-diff-review","title":"Mode 2: Git Diff Review","text":"<pre><code>python claude_review.py\n</code></pre>"},{"location":"tools_claude_review_py/#key-functions","title":"Key Functions","text":""},{"location":"tools_claude_review_py/#load_codefile_paths","title":"<code>load_code(file_paths)</code>","text":"<p>Combines multiple source files into a single Markdown-formatted string for review.</p> <p>Parameters: - <code>file_paths</code> (list): List of file paths to process</p> <p>Returns: - <code>str</code>: Markdown-formatted string containing all file contents</p> <p>Features: - Handles missing files gracefully with warning messages - Formats each file with proper Markdown code blocks - Assumes Python syntax highlighting (may need adjustment for other languages)</p>"},{"location":"tools_claude_review_py/#get_git_diff","title":"<code>get_git_diff()</code>","text":"<p>Retrieves Git diff output with fallback logic for different Git configurations.</p> <p>Returns: - <code>str</code>: Git diff string or empty string if unavailable</p> <p>Behavior: - First attempts <code>git diff origin/main...HEAD</code> - Falls back to <code>git diff HEAD^</code> if origin/main doesn't exist - Returns empty string if both commands fail</p>"},{"location":"tools_claude_review_py/#main","title":"<code>main()</code>","text":"<p>Main execution function that orchestrates the review process.</p> <p>Key Steps: 1. Loads environment variables and initializes Claude client 2. Creates output directory structure 3. Determines review mode based on command-line arguments 4. Constructs appropriate prompts for Claude 5. Makes API call and processes response 6. Saves formatted output to Markdown file</p>"},{"location":"tools_claude_review_py/#output","title":"Output","text":"<p>The tool generates a Markdown file at <code>docs/claude_review.md</code> containing:</p> <ul> <li>Timestamp of the review</li> <li>Structured feedback focusing on:</li> <li>Bugs or logic issues</li> <li>Code clarity</li> <li>Suggested improvements</li> <li>Style consistency</li> </ul>"},{"location":"tools_claude_review_py/#error-handling","title":"Error Handling","text":"<ul> <li>Missing Files: Skips non-existent files with warning messages</li> <li>Git Errors: Provides fallback diff strategies</li> <li>API Errors: Catches and reports Claude API exceptions</li> <li>No Changes: Creates stub review file when no diff is available</li> </ul>"},{"location":"tools_claude_review_py/#notes-and-suggestions","title":"Notes and Suggestions","text":""},{"location":"tools_claude_review_py/#current-limitations","title":"Current Limitations","text":"<ul> <li>Language Assumption: Code blocks are hardcoded with Python syntax highlighting</li> <li>File Type Detection: No automatic detection of programming language</li> <li>Token Limits: Limited to 1500 tokens in Claude response</li> </ul>"},{"location":"tools_claude_review_py/#recommended-improvements","title":"Recommended Improvements","text":"<ol> <li> <p>Dynamic Language Detection:    <pre><code>def detect_language(file_path):\n    extension_map = {'.py': 'python', '.js': 'javascript', '.java': 'java'}\n    return extension_map.get(os.path.splitext(file_path)[1], 'text')\n</code></pre></p> </li> <li> <p>Configurable Token Limits:    <pre><code>max_tokens = int(os.getenv(\"ANTHROPIC_MAX_TOKENS\", \"1500\"))\n</code></pre></p> </li> <li> <p>Enhanced Error Logging:    Consider adding proper logging instead of print statements for better debugging.</p> </li> <li> <p>Configuration File Support:    Add support for a configuration file to customize review criteria and output formats.</p> </li> </ol>"},{"location":"tools_claude_review_py/#integration-tips","title":"Integration Tips","text":"<ul> <li>Add this tool to your CI/CD pipeline for automated code reviews</li> <li>Use as a pre-commit hook for immediate feedback</li> <li>Integrate with GitHub Actions for pull request reviews</li> <li>Consider rate limiting for large codebases to avoid API limits</li> </ul>"},{"location":"tools_claude_review_py/#security-considerations","title":"Security Considerations","text":"<ul> <li>Store API keys securely using environment variables</li> <li>Be cautious when reviewing proprietary code through external APIs</li> <li>Consider using local models for sensitive codebases</li> </ul>"},{"location":"tools_old_autodoc_py/","title":"Tools old autodoc py","text":""},{"location":"tools_old_autodoc_py/#autodoc-generator-documentation","title":"Autodoc Generator Documentation","text":""},{"location":"tools_old_autodoc_py/#overview","title":"Overview","text":"<p>The <code>autodoc.py</code> script is an automated documentation generator that scans Python projects, analyzes source code using Claude AI, and generates comprehensive Markdown documentation. It integrates with MkDocs to create a complete documentation website with automatic navigation updates.</p>"},{"location":"tools_old_autodoc_py/#purpose","title":"Purpose","text":"<p>This tool addresses the common challenge of maintaining up-to-date documentation by: - Automatically discovering Python files in a project - Generating intelligent documentation using Claude's AI capabilities - Creating structured Markdown files with proper formatting - Updating MkDocs configuration to include new documentation pages - Maintaining documentation consistency across the entire project</p>"},{"location":"tools_old_autodoc_py/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd0d Smart File Discovery: Recursively scans directories for Python files</li> <li>\ud83e\udd16 AI-Powered Documentation: Uses Claude to generate comprehensive docs</li> <li>\ud83d\udcc1 Organized Output: Creates structured documentation in <code>docs/</code> directory</li> <li>\ud83e\udded Automatic Navigation: Updates <code>mkdocs.yml</code> with new documentation pages</li> <li>\ud83c\udfa8 Material Theme Integration: Configures MkDocs with Material theme and extensions</li> </ul>"},{"location":"tools_old_autodoc_py/#important-functions","title":"Important Functions","text":""},{"location":"tools_old_autodoc_py/#snake_md_pathrel_path-str-str","title":"<code>snake_md_path(rel_path: str) -&gt; str</code>","text":"<p>Converts file paths to markdown-friendly filenames by replacing path separators and dots with underscores.</p> <pre><code># Example: \"src/utils/helper.py\" \u2192 \"src_utils_helper_py.md\"\n</code></pre>"},{"location":"tools_old_autodoc_py/#load_mkdocs_configpath-str","title":"<code>load_mkdocs_config(path: str)</code>","text":"<p>Loads existing MkDocs configuration or creates a default structure if none exists.</p> <p>Returns: - Existing YAML configuration as dictionary - Default configuration with Material theme</p>"},{"location":"tools_old_autodoc_py/#write_mkdocs_configpath-str-static_nav-autodoc_items","title":"<code>write_mkdocs_config(path: str, static_nav, autodoc_items)</code>","text":"<p>Writes comprehensive MkDocs configuration with: - Material theme with dark/light mode toggle - Rich markdown extensions (code highlighting, admonitions, etc.) - Search functionality and navigation features - Combined navigation (static + auto-generated)</p>"},{"location":"tools_old_autodoc_py/#collect_python_filesbase-str","title":"<code>collect_python_files(base: str)</code>","text":"<p>Recursively discovers Python files while filtering out: - Test files (<code>test_*.py</code>) - Init files (<code>__init__.py</code>) - Non-Python files</p>"},{"location":"tools_old_autodoc_py/#core-workflow","title":"Core Workflow","text":"<ol> <li>Environment Setup</li> <li>Loads environment variables (API keys)</li> <li>Initializes Anthropic client</li> <li> <p>Creates output directory structure</p> </li> <li> <p>File Discovery</p> </li> <li>Scans target directory for Python files</li> <li> <p>Filters out unwanted files (tests, init)</p> </li> <li> <p>Documentation Generation</p> </li> <li>Reads each Python file's source code</li> <li>Sends code to Claude with structured prompt</li> <li>Generates comprehensive Markdown documentation</li> <li> <p>Saves output with timestamp headers</p> </li> <li> <p>Navigation Management</p> </li> <li>Preserves existing MkDocs navigation</li> <li>Removes old AutoDocs entries</li> <li>Adds new documentation pages</li> <li>Updates mkdocs.yml configuration</li> </ol>"},{"location":"tools_old_autodoc_py/#configuration","title":"Configuration","text":""},{"location":"tools_old_autodoc_py/#environment-variables","title":"Environment Variables","text":"<pre><code>ANTHROPIC_API_KEY=your_claude_api_key_here\nANTHROPIC_MODEL=claude-sonnet-4-20250514  # Optional, defaults to specified model\n</code></pre>"},{"location":"tools_old_autodoc_py/#usage","title":"Usage","text":"<pre><code># Document current directory\npython autodoc.py\n\n# Document specific path\npython autodoc.py /path/to/project\n</code></pre>"},{"location":"tools_old_autodoc_py/#output-structure","title":"Output Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Auto-generated index (if missing)\n\u251c\u2500\u2500 filename_py.md             # Generated documentation files\n\u2514\u2500\u2500 other_module_py.md\nmkdocs.yml                     # Updated configuration\n</code></pre>"},{"location":"tools_old_autodoc_py/#suggestions-and-notes","title":"Suggestions and Notes","text":""},{"location":"tools_old_autodoc_py/#strengths","title":"\u2705 Strengths","text":"<ul> <li>Comprehensive MkDocs integration with modern Material theme</li> <li>Intelligent file filtering prevents documentation clutter</li> <li>Preserves manual navigation while adding auto-generated content</li> <li>Robust error handling continues processing despite individual file failures</li> </ul>"},{"location":"tools_old_autodoc_py/#potential-improvements","title":"\ud83d\udd27 Potential Improvements","text":"<ul> <li>Add configuration file support for customizing documentation prompts</li> <li>Implement incremental updates to avoid re-processing unchanged files</li> <li>Add support for custom exclusion patterns beyond hardcoded filters</li> <li>Include docstring extraction for supplementing AI-generated content</li> </ul>"},{"location":"tools_old_autodoc_py/#important-notes","title":"\u26a0\ufe0f Important Notes","text":"<ul> <li>Requires valid Anthropic API key - ensure proper environment setup</li> <li>Overwrites existing auto-generated files - manual edits will be lost</li> <li>Token limits apply - very large files may be truncated</li> <li>Network dependency - requires internet connection for Claude API calls</li> </ul>"},{"location":"tools_old_autodoc_py/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ul> <li>Run regularly as part of CI/CD pipeline</li> <li>Review generated documentation for accuracy</li> <li>Supplement with manual documentation for complex concepts</li> <li>Use meaningful file and function names for better AI analysis</li> </ul>"},{"location":"internal/auto-dev-loop-concept/","title":"Concept","text":""},{"location":"internal/nautee-concept/","title":"\ud83d\udcc4 Nautee Concept","text":"<p>Yes \u2014 that\u2019s a very smart and robust setup. Here\u2019s a breakdown and a few improvements to sharpen the architecture you\u2019re envisioning:</p> <p>\u2e3b</p> <p>\u2705 Your Future Setup: Overview</p> <p>\ud83e\uddd1\u200d\ud83d\udcbb Main IDE: Cursor     \u2022   Primary development + editing     \u2022   Multi-model inline assistant (Claude 3, GPT-4o, Gemini, etc.)     \u2022   Use Claude 3 Sonnet or Opus for:     \u2022   Inline code review     \u2022   Explaining changes     \u2022   Suggested refactors     \u2022   Generating or rewriting tests     \u2022   Acts as your first line of feedback during development</p> <p>\u2e3b</p> <p>\ud83e\udde0 Claude Code: Background Review Layer     \u2022   Triggered on file save, folder audit, or code checkpoint     \u2022   Excludes test, *.spec.js, mocks, etc.     \u2022   Runs in batch mode (e.g. per module or folder), such as:</p> <p>python review_folder.py ./src --model claude-sonnet</p> <pre><code>\u2022   Outputs:\n\u2022   Markdown summaries (output/reviews/)\n\u2022   Structured feedback per file (violations, duplication, architecture issues)\n\u2022   Optional diffs or \u201caction suggestions\u201d\n</code></pre> <p>This is your agentic sanity check \u2014 lower noise, deeper understanding</p> <p>\u2e3b</p> <p>\u26d3\ufe0f Post-Git Check-In: Nautee x Claude SDK</p> <p>After code is pushed to Git or merged into a branch:</p> <p>\ud83d\udd04 Hook via:     \u2022   Git post-commit     \u2022   GitHub/GitLab webhook     \u2022   CI pipeline trigger</p> <p>\ud83e\udd16 Nautee + Claude SDK perform:     1.  End-to-End Diff Review (e.g. main vs dev)     2.  Change Risk Classification (minor, major, critical)     3.  Documentation Check (has readme, schema updated, version bump)     4.  Cross-Repo or Dependency Checks (if needed)     5.  Security/Wildcode Audit (flag common red flags)     6.  Summary Note to PR or Slack/ClickUp/Obsidian</p> <p>This is your automated post-check-in watchdog \u2014 and where you can build a dev memory layer (e.g., \u201clast time we changed this function, tests broke\u201d).</p> <p>\u2e3b</p> <p>\ud83e\uddf1 Layered Review Architecture</p> <p>Layer   Trigger Agent   Output  Goal 1\ufe0f\u20e3 Cursor Inline   On edit Claude / GPT    Inline help Dev-time velocity 2\ufe0f\u20e3 Folder Batch    On save / manual    Claude  Markdown review Offline quality gate 3\ufe0f\u20e3 Post-Commit On push / merge Nautee + Claude SDK Logs, PR comments   Risk, doc, and cross-cutting check</p> <p>\u2e3b</p> <p>\ud83e\udde9 Optional Enhancements     \u2022   Claude Memory Agent \u2192 Tracks patterns across PRs (recurring issues, frequently touched modules)     \u2022   Log Aggregator \u2192 Streams markdown reviews into Notion, Obsidian, or a dashboard     \u2022   Auto-Ticketing \u2192 Connects to ClickUp to auto-create \u201cReview Fix\u201d tickets for critical findings     \u2022   Reviewer Persona Tuning \u2192 Have \u201cStrict Claude\u201d vs. \u201cSuggestive Claude\u201d modes</p> <p>\u2e3b</p> <p>\ud83d\ude80 Final Setup Summary</p> <p>[1] Cursor IDE:      - Real-time assistant, safe by design     - Claude Sonnet for trusted day-to-day help</p> <p>[2] Local Batch Reviews (pre-check-in):     - Claude Sonnet or Opus      - Runs on demand or auto via folder triggers     - Logs in /output/reviews</p> <p>[3] Git Post-Check-in:     - Nautee hooks     - Claude SDK pipeline for PR review, security, documentation checks</p> <p>\u2192 Full dev flow covered with two Claude layers  \u2192 Human-in-the-loop optional \u2192 Compatible with agent chains and memory tracing</p> <p>\u2e3b</p>"},{"location":"internal/nautee-concept/#adding-litellm","title":"Adding LiteLLM","text":"<p>Exactly \u2014 using LiteLLM behind Nautee is not just a great idea, it\u2019s a perfect strategic match for your architecture.</p> <p>\u2e3b</p> <p>\ud83e\udd16 Why LiteLLM Behind Nautee Is a Strong Move</p> <p>\ud83d\udd0c 1. Unified Abstraction Over Claude + Others</p> <p>LiteLLM gives you:     \u2022   One consistent API for Claude, GPT-4, Gemini, Mistral, and more     \u2022   Easy switching of models without touching business logic     \u2022   Claude-compatible endpoints with streaming, retries, logging</p> <p>So you can plug Claude Code into Nautee, and later test alternatives like GPT-4o, Mistral, or even local LLMs \u2014 all without rewriting Nautee logic.</p> <p>\u2e3b</p> <p>\ud83e\udde0 2. Smart Routing and Fallbacks</p> <p>You can configure:     \u2022   Claude Opus for deep reviews     \u2022   Claude Sonnet for faster diff checks     \u2022   Fallbacks to GPT-4o or Mistral if Anthropic API fails or rate-limits</p> <p>model_list = [   {\"model_name\": \"claude-sonnet\", \"litellm_provider\": \"anthropic\"},   {\"model_name\": \"gpt-4o\", \"litellm_provider\": \"openai\"}, ]</p> <p>This gives Nautee high availability + flexibility.</p> <p>\u2e3b</p> <p>\ud83d\udd10 3. Local Proxying + Token Auditing</p> <p>Nautee can route all LLM traffic through your local LiteLLM instance, giving you:     \u2022   Centralized logging and analytics     \u2022   Easy API key rotation     \u2022   OpenTelemetry hooks to trace prompts/results</p> <p>Ideal for:     \u2022   Security audits     \u2022   Cost analysis     \u2022   Rate limit management</p> <p>\u2e3b</p> <p>\ud83e\udde9 4. Multi-Agent Chains</p> <p>LiteLLM can also help orchestrate:     \u2022   Sequential reviews (Claude \u2192 GPT \u2192 JSON filter)     \u2022   Persona routing (e.g. \u201cStrict Reviewer\u201d \u2192 Opus, \u201cCreative Tweaker\u201d \u2192 GPT-4o)</p> <p>Nautee can plug into this flow to:     \u2022   Send a repo diff     \u2022   Get multiple takes from different models     \u2022   Merge insights or flag disagreements</p> <p>\u2e3b</p> <p>\ud83d\udee0 Practical Example Setup</p> <p>Step 1: Run LiteLLM Locally</p> <p>litellm --port 4000</p> <p>Step 2: Configure Nautee to Use It</p> <p>from nautee.agents import ClaudeReviewer from nautee.config import settings</p> <p>settings.LLM_API_BASE = \"http://localhost:4000\" settings.MODEL_NAME = \"claude-3-sonnet\"</p> <p>agent = ClaudeReviewer() agent.review_diff(\"main\", \"dev\")</p> <p>Step 3: Add a FastAPI wrapper for external calls</p> <p>You can expose a REST endpoint like:</p> <p>POST /nautee/review Body: { repo_path, base_branch, target_branch }</p> <p>\u2e3b</p> <p>\ud83d\udd1a Final Architecture View</p> <p>[Cursor IDE] --(Inline help)--&gt; Claude 3 (via Cursor)</p> <p>[Nautee Agent] --(LLM calls)--&gt; LiteLLM (local proxy)                        |        \u2514\u2500&gt; Claude Sonnet: Markdown Review Agent        \u2514\u2500&gt; Claude Opus: Deep Security Review        \u2514\u2500&gt; GPT-4o: Creativity/Aesthetics Check (optional)</p> <p>[Post-Git Hook] --(Triggered)--&gt; Nautee CLI \u2192 Claude via LiteLLM</p>"},{"location":"internal/nautee-concept/#_1","title":"\ud83d\udcc4 Nautee Concept","text":""}]}